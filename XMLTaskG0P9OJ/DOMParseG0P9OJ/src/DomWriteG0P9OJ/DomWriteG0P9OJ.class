package DomWriteG0P9OJ;

import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class DomWriteG0P9OJ {
   public DomWriteG0P9OJ() {
   }

   public static void main(String[] var0) throws Exception {
      DocumentBuilderFactory doc = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = doc.newDocumentBuilder();
      Document newdoc = docBuilder.newDocument();
      Element elem = newdoc.createElement("gepjarmu");
      elem.setAttribute("xmlns:xs", "http://www.w3.org/2001/XMLSchema-instance");
      elem.setAttribute("xs:noNamespaceSchemaLocation", "XMLSchemaG0P9OJ.xsd");
      newdoc.appendChild(elem);

      addMunkagep(newdoc, elem, "AB-CD-123", "HU345678", "100FDSAF008F1G", "0FSFDSFFF70000019", "15B", "FSDAG34");
      addMunkagep(newdoc, elem, "AA-BB-720", "HU346544", "100FDFGDS58F1G", "0FSFDSCCC70000019", "10B", "HSDAG34");
      addMunkagep(newdoc, elem, "KD-QS-510", "RO378544", "540FDFGDS58F1G", "3HSFDSCCC70000019", "98C", (String)null);
      addTulajdonos(newdoc, elem, "HU345678", "Kovacs", "Arpad");
      addTulajdonos(newdoc, elem, "HU346544", "Szabo", "Peter");
      addTulajdonos(newdoc, elem, "RO378544", "Elekes", "Tibor");
      addMotor(newdoc, elem, "100FDSAF008F1G", "dizel", "68", "160 Nm");
      addMotor(newdoc, elem, "100FDFGDS58F1G", "benzin", "75", "107 Nm");
      addMotor(newdoc, elem, "540FDFGDS58F1G", "elektromos", "150", "310 Nm");
      addKarosszeria(newdoc, elem, "0FSFDSFFF70000019", "matt", "nincs", "feher", "szurke");
      addKarosszeria(newdoc, elem, "0FSFDSCCC70000019", "teljes", "van", "feher", null);
      addKarosszeria(newdoc, elem, "3HSFDSCCC70000019", "reszleges", "nincs", "zold", "fekete", "szurke");
      addGyartas(newdoc, elem, "15B", "Hyundai", "R25Z-9AK", "2020");
      addGyartas(newdoc, elem, "10B", "JCB", "1CX", "2008");
      addGyartas(newdoc, elem, "98C", "JCB", "4CX", "2019");
      addBirtoklas(newdoc, elem, "AB-CD-123", "HU345678", "2023-01-01");
      addBirtoklas(newdoc, elem, "AA-BB-720", "HU346544", "2022-11-04");
      addBirtoklas(newdoc, elem, "KD-QS-510", "RO378544", "2021-05-18");
      String docname = "XMLG0P9OJ2.xml";
      saveXML(newdoc, docname);
      printXML(newdoc);
   }


   private static void addMunkagep(Document doc, Element elem, String str1, String str2, String str3, String str4, String str5, String str6) {
      Element docElem = doc.createElement("munkagep");
      docElem.setAttribute("rendszam", str1);
      addChildElement(doc, docElem, "tulaj_jogsi", str2);
      addChildElement(doc, docElem, "motor_szama", str3);
      addChildElement(doc, docElem, "alvaz_szama", str4);
      addChildElement(doc, docElem, "gyartas_sorszam", str5);
      if (str6 != null) {
         addChildElement(doc, docElem, "casco_azon", str6);
      }

      elem.appendChild(docElem);
   }


   private static void addTulajdonos(Document doc, Element elem, String str1, String str2, String str3) {
      Element elem1 = doc.createElement("tulajdonos");
      var5.setAttribute("jogositvany_szama", str1);
      Element elem2 = doc.createElement("nev");
      addChildElement(doc, elem2, "vezeteknev", str2);
      addChildElement(doc, elem2, "keresztnev", str3);
      elem1.appendChild(elem2);
      elem.appendChild(elem1);
   }


   private static void addMotor(Document doc, Element elem, String str1, String str2, String str3, String str4) {
      Element elem1 = doc.createElement("motor");
      elem1.setAttribute("motorszam", str1);
      addChildElement(doc, elem1, "uzemanyag", str2);
      addChildElement(doc, elem1, "loero", str3);
      addChildElement(doc, elem1, "nyomatek", str4);
      elem.appendChild(elem1);
   }


   private static void addKarosszeria(Document doc, Element elem, String str1, String str2, String str3, String... str4) {
      Element elem1 = doc.createElement("karosszeria");
      elem1.setAttribute("alvazszam", str1);
      addChildElement(doc, elem1, "felulet", str2);
      addChildElement(doc, elem1, "engedely", str3);
      String[] strVar = str4;
      int varLength = str4.length;

      for(int i = 0; i < varLength; ++i) {
         String strVar1 = strVar[i];
         addChildElement(doc, elem1, "szin", strVar1);
      }

      elem.appendChild(elem1);
   }


   private static void addGyartas(Document doc, Element elem, String str1, String str2, String str3, String str4) {
      Element elem1 = doc.createElement("gyartas");
      elem1.setAttribute("gyartasID", str1);
      addChildElement(doc, elem1, "marka", str2);
      addChildElement(doc, elem1, "modell", str3);
      addChildElement(doc, elem1, "gyartasi_ev", str4);
      elem.appendChild(elem1);
   }


   private static void addBirtoklas(Document doc, Element elem, String str1, String str2, String str3) {
      Element elem1 = doc.createElement("birtoklas");
      elem1.setAttribute("rendszam", str1);
      elem1.setAttribute("jogositvany_szama", str2);
      addChildElement(doc, elem1, "birtoklas_kezdete", str3);
      elem.appendChild(elem1);
   }


   private static void addChildElement(Document doc, Element elem, String str1, String str2) {
      Element elem1 = doc.createElement(str1);
      elem1.appendChild(doc.createTextNode(str2));
      elem.appendChild(elem1);
   }


   private static void saveXML(Document doc, String elem) throws Exception {
      TransformerFactory transfactory = TransformerFactory.newInstance();
      Transformer transf = transfactory.newTransformer();
      transf.setOutputProperty("encoding", "UTF-8");
      transf.setOutputProperty("indent", "yes");
      DOMSource docsource = new DOMSource(doc);
      StreamResult streamRes = new StreamResult(new File(elem));
      transf.transform(docsource, streamRes);
   }


   private static void printXML(Document doc) throws Exception {
      TransformerFactory transfact = TransformerFactory.newInstance();
      Transformer transf = transfact.newTransformer();
      transf.setOutputProperty("encoding", "UTF-8");
      transf.setOutputProperty("indent", "yes");
      StringWriter stringwr = new StringWriter();
      StreamResult streamRes = new StreamResult(stringwr);
      DOMSource docSource = new DOMSource(doc);
      transf.transform(docSource, streamRes);
      System.out.println("XML dokumentum:");
      System.out.println(stringwr.toString());
   }
}
