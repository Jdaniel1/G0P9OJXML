// Source code is decompiled from a .class file using FernFlower decompiler.
package DomReadG0P9OJ;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class DomReadG0P9OJ {
   public DomReadG0P9OJ() {
   }

   public static void main(String[] var0) {
      try {
         File var1 = new File("XML_read_output.txt");
         StreamResult var2 = new StreamResult(var1);
         DocumentBuilderFactory var3 = DocumentBuilderFactory.newInstance();
         DocumentBuilder var4 = var3.newDocumentBuilder();
         Document var5 = var4.parse(new File("XMLG0P9OJ.xml"));
         cutEmptyStrings(var5.getDocumentElement());
         writeDoc(var5, var2);
         System.out.println(makeToXMLFormat(var5));
      } catch (Exception var6) {
         var6.printStackTrace();
      }

   }

   private static void cutEmptyStrings(Node var0) {
      NodeList var1 = var0.getChildNodes();
      ArrayList var2 = new ArrayList();

      for(int var3 = 0; var3 < var1.getLength(); ++var3) {
         if (var1.item(var3).getNodeType() == 3 && var1.item(var3).getTextContent().isEmpty()) {
            var2.add(var1.item(var3));
         } else {
            cutEmptyStrings(var1.item(var3));
         }
      }

      Iterator var5 = var2.iterator();

      while(var5.hasNext()) {
         Node var4 = (Node)var5.next();
         var0.removeChild(var4);
      }

   }

   public static void writeDoc(Document var0, StreamResult var1) {
      try {
         TransformerFactory var2 = TransformerFactory.newInstance();
         Transformer var3 = var2.newTransformer();
         var3.setOutputProperty("encoding", "UTF-8");
         var3.setOutputProperty("indent", "yes");
         var3.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
         DOMSource var4 = new DOMSource(var0);
         var3.transform(var4, var1);
      } catch (Exception var5) {
         var5.printStackTrace();
      }

   }

   public static String makeToXMLFormat(Document var0) {
      String var10000 = var0.getXmlVersion();
      return "<?xml version=\"" + var10000 + "\" encoding=\"" + var0.getXmlEncoding() + "\" ?>" + elementsToXMLFormat(var0.getDocumentElement(), 0);
   }

   public static String elementsToXMLFormat(Node var0, int var1) {
      if (var0.getNodeType() != 1) {
         return "";
      } else {
         StringBuilder var2 = new StringBuilder();
         var2.append(getIndent(var1)).append("<").append(((Element)var0).getTagName());
         if (var0.hasAttributes()) {
            for(int var3 = 0; var3 < var0.getAttributes().getLength(); ++var3) {
               Node var4 = var0.getAttributes().item(var3);
               var2.append(" ").append(var4.getNodeName()).append("=\"").append(var4.getNodeValue()).append("\"");
            }
         }

         NodeList var5 = var0.getChildNodes();
         if (var5.getLength() == 1 && var5.item(0).getNodeType() == 3) {
            var2.append(">").append(var5.item(0).getTextContent().trim()).append("</").append(((Element)var0).getTagName()).append(">\n");
         } else {
            var2.append(">\n");

            for(int var6 = 0; var6 < var5.getLength(); ++var6) {
               var2.append(elementsToXMLFormat(var5.item(var6), var1 + 1));
            }

            var2.append(getIndent(var1)).append("</").append(((Element)var0).getTagName()).append(">\n");
         }

         return var2.toString();
      }
   }

   private static String getIndent(int var0) {
      StringBuilder var1 = new StringBuilder();

      for(int var2 = 0; var2 < var0; ++var2) {
         var1.append("    ");
      }

      return var1.toString();
   }
}
