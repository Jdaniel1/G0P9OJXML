package DomWriteG0P9OJ;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

public class DomWriteG0P9OJ {
   public DomWriteG0P9OJ() {
   }

   public static void main(String[] var0) {
      try {
         File file = new File("XMLIGRYHL.xml");
         DocumentBuilderFactory docfactory = DocumentBuilderFactory.newInstance();
         DocumentBuilder docBuild = docfactory.newDocumentBuilder();
         Document docParse = docBuild.parse(file);
         System.out.println("XML dokumentum fa strukt\u00far\u00e1ban:");
         printDocument(docParse.getDocumentElement(), "", System.out);
         writeXml(docParse, new File("XMLG0P9OJ.xml"));
      } catch (IOException | TransformerException | ParserConfigurationException parseExc) {
         parseExc.printStackTrace();
      } catch (SAXException saxeExc) {
         saxeExc.printStackTrace();
      }

   }


   private static void writeXml(Document doc, File file) throws TransformerException, IOException {
      Transformer transf = TransformerFactory.newInstance().newTransformer();
      DOMSource domS = new DOMSource(doc);
      StreamResult streamRes = new StreamResult(file);
      transf.transform(domS, streamRes);
      System.out.println("\nAz XML fa struktura kiirva a " + file.getName() + " fajlba.");
      PrintStream prtStream = new PrintStream(new FileOutputStream(file));

      try {
         printDocument(doc.getDocumentElement(), "", prtStream);
      } catch (Throwable thr) {
         try {
            prtStream.close();
         } catch (Throwable thr1) {
            thr.addSuppressed(thr1);
         }

         throw thr;
      }

      prtStream.close();
   }


   private static void printDocument(Node node1, String str, PrintStream prtStream) {
      int i;
      if (node1.getNodeType() == 1) {
         prtStream.print(str + node1.getNodeName());
         if (node1.getAttributes() != null) {
            for(i = 0; i < node1.getAttributes().getLength(); ++i) {
               String var10001 = node1.getAttributes().item(i).getNodeName();
               prtStream.print(" " + var10001 + "=\"" + node1.getAttributes().item(i).getNodeValue() + "\"");
            }
         }

         prtStream.println();
         str = str + "|   ";
      }

      for(i = 0; i < node1.getChildNodes().getLength(); ++i) {
         printDocument(node1.getChildNodes().item(i), str, prtStream);
      }

   }
}
